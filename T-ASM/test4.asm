.model small
.stack 100h
.data
    oldX    dw 0    ; Предыдущая X координата
    oldY    dw 0    ; Предыдущая Y координата
    color   db 15   ; Цвет точки (белый)

.code
main proc
    mov ax, @data
    mov ds, ax

    ; Установка видеорежима 13h (320x200, 256 цветов)
    mov ax, 0013h
    int 10h

    ; Инициализация мыши
    call init_mouse
    
    ; Основной цикл программы
main_loop:
    ; Получить состояние мыши
    mov ax, 0003h   ; Функция 3 - получить позицию и статус кнопок
    int 33h
    
    ; BX содержит состояние кнопок (Бит 0 - левая кнопка, Бит 1 - правая кнопка)
    ; CX содержит X-координату
    ; DX содержит Y-координату
    
    ; Проверяем нажатие правой кнопки мыши (Бит 1 в BX)
    test bx, 2      ; Проверяем Бит 1 (правая кнопка)
    jz no_right_click
    
    ; Если правая кнопка нажата, очищаем экран
    call clear_screen_safe
    jmp main_loop_continue
    
no_right_click:   
    ; Рисуем точку в текущей позиции мыши если нажата левая кнопка
    test bx, 1
    jz main_loop_continue
    
    push bx         ; Сохраняем состояние кнопок
    
    mov ah, 0Ch     ; Функция 0Ch - записать пиксель
    mov al, [color] ; Цвет точки
    mov bh, 0       ; Номер видеостраницы
    int 10h         ; CX и DX уже содержат координаты
    
    ; Рисуем дополнительные точки вокруг для имитации курсора
    mov ah, 0Ch
    dec cx          ; Точка слева
    int 10h
    
    inc cx
    inc cx          ; Точка справа
    int 10h
    
    dec cx
    dec dx          ; Точка сверху
    int 10h
    
    inc dx
    inc dx          ; Точка снизу
    int 10h
    
    pop bx          ; Восстанавливаем состояние кнопок
    
    ; Сохраняем текущие координаты
    mov [oldX], cx
    mov [oldY], dx

main_loop_continue:
    ; Добавляем небольшую задержку для лучшей производительности
    mov cx, 200
delay_loop:
    loop delay_loop
    
    ; Проверка на нажатие клавиши
    mov ah, 01h     ; Функция 01h - проверить, была ли нажата клавиша
    int 16h
    jz main_loop    ; Если клавиша не нажата, продолжаем цикл
    
    ; Клавиша была нажата, считываем её
    mov ah, 00h     ; Функция 00h - считать клавишу
    int 16h
    
    ; Если нажат ESC (скан-код 1), выходим
    cmp ah, 1
    jne check_color
    jmp far_exit    ; Используем дальний переход
    
check_color:
    ; Если нажата клавиша пробел, меняем цвет
    cmp ah, 39h     ; Скан-код пробела
    jne main_loop
    
    ; Меняем цвет (просто увеличиваем значение)
    inc [color]
    and [color], 0Fh ; Ограничиваем цветом от 0 до 15
    jmp main_loop

; Процедура безопасной очистки экрана (сохраняет настройки мыши)
clear_screen_safe proc
    push ax
    push bx
    push cx
    push dx
    push es
    push di
    
    ; Скрываем курсор мыши на время очистки
    mov ax, 0002h   ; Функция 2 - скрыть курсор мыши
    int 33h
    
    ; Используем прямую запись в видеопамять
    mov ax, 0A000h  ; Сегментный адрес видеопамяти в режиме 13h
    mov es, ax      ; ES указывает на видеопамять
    xor di, di      ; DI = 0 (начало видеопамяти)
    xor ax, ax      ; AX = 0 (черный цвет)
    mov cx, 32000   ; Размер видеопамяти в словах (64000 байт / 2)
    cld             ; Направление вперед
    rep stosw       ; Заполняем память (ES:DI) значением AX, CX раз
    
    ; Снова показываем курсор мыши
    mov ax, 0001h   ; Функция 1 - показать курсор мыши
    int 33h
    
    pop di
    pop es
    pop dx
    pop cx
    pop bx
    pop ax
    ret
clear_screen_safe endp

; Процедура инициализации мыши
init_mouse proc
    ; Инициализация мыши
    mov ax, 0000h   ; Функция 0 - инициализация мыши
    int 33h
    
    ; Проверка на успешную инициализацию
    cmp ax, 0
    jne mouse_ok    ; Если AX не равно 0, мышь поддерживается
    
    ; Если мышь не поддерживается, переходим на метку exit
    jmp far_exit    ; Используем дальний переход
    
mouse_ok:
    ; Скрыть стандартный курсор мыши
    mov ax, 0002h   ; Функция 2 - скрыть курсор мыши
    int 33h

    ; Установка границ для курсора мыши (0,0) - (319,199)
    mov ax, 0007h   ; Функция 7 - установить горизонтальные границы
    mov cx, 0       ; Минимальная X-координата
    mov dx, 319     ; Максимальная X-координата
    int 33h
    
    mov ax, 0008h   ; Функция 8 - установить вертикальные границы
    mov cx, 0       ; Минимальная Y-координата
    mov dx, 199     ; Максимальная Y-координата
    int 33h
    
    ; Показать наш собственный курсор
    mov ax, 0001h   ; Функция 1 - показать курсор мыши
    int 33h
    
    ret
init_mouse endp

far_exit:           ; Метка для дальнего перехода
    ; Восстановление текстового режима
    mov ax, 0003h
    int 10h
    
    ; Выход в DOS
    mov ax, 4C00h
    int 21h
main endp

end main